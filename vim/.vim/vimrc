call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'w0rp/ale'
Plug 'christoomey/vim-tmux-navigator'
Plug 'bronson/vim-visual-star-search'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'davidhalter/jedi-vim'
Plug 'maralla/completor.vim'
Plug 'greymd/oscyank.vim'
Plug 'farmergreg/vim-lastplace'
Plug 'machakann/vim-highlightedyank'  " not needed in neovim
Plug 'cocopon/iceberg.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'mbbill/undotree'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'ap/vim-buftabline'
Plug 'delphinus/vim-auto-cursorline'
Plug 'vimwiki/vimwiki'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-scripts/ReplaceWithRegister'
call plug#end()

" Completion
let g:jedi#completions_enabled = 0
let g:completor_complete_options = 'menuone,preview'
let g:completor_auto_trigger = 0
let g:completor_auto_close_doc = 0
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <silent><expr> <Tab> Tab_Or_Complete()

function! Tab_Or_Complete() abort
  if pumvisible()
    return "\<C-n>"
  elseif s:check_back_space()
    return "\<Tab>"
  else
    return "\<C-R>=completor#do('complete')\<CR>"
  endif
endfunction

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" pip install --upgrade --root ~/.jedi jedi
let $PYTHONPATH .= ':'.expand('~/.jedi')

" Buffers
set hidden
set autoread
set noswapfile
" Remember more files
set viminfo=!,'1000,<50,s10,h
" Windows
set textwidth=80
set colorcolumn=80
set scrolloff=5
set nowrap
set diffopt+=vertical
" Change default position of new splits
set splitbelow
set splitright
" Tabs and whitespace
set shiftwidth=4
set expandtab
set list
" Mouse
set mouse=a  " mouse support in terminals
if &term =~ '^screen'
    " resize splits in tmux
    set ttymouse=xterm2
    " make bracketed paste mode work, https://vi.stackexchange.com/a/16579
    try
        let &t_BE="\<Esc>[?2004h"
        let &t_BD="\<Esc>[?2004l"
        let &t_PS="\<Esc>[200~"
        let &t_PE="\<Esc>[201~"
    catch
        " Fail silently on error. Bracketed paste mode doesn't work in vim
        " ~8.0.3, which I sometimes use :-(
    endtry
endif
" Clipboard
set clipboard^=unnamed  " yanks and cuts go in system clipboard
" Search
set ignorecase
set smartcase
set showmatch
set hlsearch
" Keys
set pastetoggle=<Leader>tp
nnoremap <leader><space> :noh<cr>
" h and l and ~ wrap over lines
set whichwrap=h,l,~
" Q reformats current paragraph or selected text
nnoremap Q gqap
vnoremap Q gq
" Use up and down to move by screen line
map <up> gk
map <down> gj
vmap <up> gk
vmap <down> gj
inoremap <up> <c-o>gk
inoremap <down> <c-o>gj
nmap k gk
nmap j gj
vmap k gk
vmap j gj
" Use J and K to move selection up and down in visual mode
" https://github.com/erkrnt/awesome-streamerrc/blob/5547d1da187ccd6fe4794b15f05c3cdcdc3725d0/ThePrimeagen/init.vim#L116-L117
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
" Use undotree and persist undo across sessions
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile
nnoremap <leader>u :UndotreeToggle<CR>

" Show list of possible files on tab completion, rather than first guess
set wildmode=longest,list

" Screen decoration
set number
set relativenumber
set cursorline
set statusline=
set statusline+=%{FugitiveStatusline()}
set statusline+=\ %f\ %y\ %=%c,%l/%L

" Colors
if $ITERM_PROFILE == 'Light'
    set background=light
else
    set background=dark
endif
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
" Must happen before we set colorscheme; will rerun when colorscheme changes
augroup CustomColors
    autocmd!
    autocmd ColorScheme * highlight! link IndentGuidesEven LineNr
    " Underline spelling problems
    autocmd ColorScheme * highlight! link SpellBad Underlined
    autocmd ColorScheme * highlight! link SpellCap SpellBad
    autocmd ColorScheme * highlight! link SpellLocal SpellBad
    autocmd ColorScheme * highlight! link SpellRare SpellBad
    " Prominent comments
    autocmd ColorScheme * highlight! link Comment Error
    " Reverse selection
    autocmd ColorScheme * highlight! Visual cterm=reverse gui=reverse
    " buftabline
    autocmd ColorScheme * highlight! link BufTabLineCurrent PmenuSel
    autocmd ColorScheme * highlight! link BufTabLineHidden LineNr
    autocmd ColorScheme * highlight! link BufTabLineFill LineNr
    " statusline
    autocmd ColorScheme * highlight! link StatusLine PmenuSel
    autocmd ColorScheme * highlight! link StatusLineTerm PmenuSel
    autocmd ColorScheme * highlight! link StatusLineNC LineNr
    autocmd ColorScheme * highlight! link StatusLineTermNC LineNr
augroup END
try
    colorscheme iceberg
catch
    colorscheme default
endtry

" Set fullscreen background to same color as normal text
if has("gui_running")
    set gfn=Source\ Code\ Pro:h15
    set fuoptions=maxvert
    set guioptions-=T
endif

" Open in TeXShop
nnoremap <leader>tx :!open -a TeXShop %<cr><cr>

" Use :w!! to save root files you forgot to open with sudo
ca w!! w !sudo tee "%"

" Filetype-specific configuration
autocmd FileType asciidoc,markdown,text,gitcommit setlocal formatoptions+=n nojoinspaces spell
autocmd FileType javascript setlocal shiftwidth=2
autocmd FileType go setlocal shiftwidth=8 tabstop=8 noexpandtab
let g:ale_fixers = {
\   'python': ['isort', 'black'],
\}
let g:ale_lint_on_text_changed = 1
let g:ale_fix_on_save = 1

" Expand %% to directory of file in current buffer (also %:h<Tab>)
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Name current syntax group
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" ss to generate new split
nnoremap <silent> ss <C-w>s

" readline bindings for command mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" FZF bindings
nmap <leader>h :History<cr>
nmap <leader>b :Buffers<cr>
nmap <leader>f :Files<cr>
nmap <leader>g :Rg<cr>

" Unimpaired-style mappings to jump to ALE warnings/errors
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Lint less
let g:ale_lint_on_text_changed = 'never'

" Leader-y to yank to system clipboard (works over remote tmux)
noremap <silent> <Leader>y :Oscyank<cr>

let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1

" Make :Rg match occurences of patterns inside files, not filenames
" https://github.com/junegunn/fzf.vim#example-rg-command-with-preview-window
" https://github.com/junegunn/fzf.vim/issues/346#issuecomment-412558898
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)

" Markdown: link selected text using URL in system clipboard
augroup mdkeys
  autocmd! mdkeys
  autocmd Filetype markdown vnoremap <Leader>k <ESC>`>a](<ESC>"*pa)<ESC>`<i[<ESC>
augroup end

" splitjoin
let g:splitjoin_trailing_comma = 1
let g:splitjoin_python_brackets_on_separate_lines = 1

" vimwiki
let g:vimwiki_list = [{'path': '~/share/wiki', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_global_ext = 0
let g:vimwiki_key_mappings = { 'headers': 0 }
let g:vimwiki_url_maxsave = 0

" Automatic rename of tmux window
if exists('$TMUX') && !exists('$NORENAME')
    au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
    au VimLeave * call system('tmux set-window automatic-rename on')
endif

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
    \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" jk for esc
inoremap <esc> <nop>
inoremap jk <esc>
