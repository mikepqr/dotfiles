call plug#begin()
Plug 'AndrewRadev/splitjoin.vim'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'ap/vim-buftabline'
Plug 'aymericbeaumet/vim-symlink'
Plug 'christoomey/vim-tmux-navigator'
Plug 'cocopon/iceberg.vim'
Plug 'delphinus/vim-auto-cursorline'
Plug 'editorconfig/editorconfig-vim'
Plug 'greymd/oscyank.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-dirvish'
Plug 'machakann/vim-highlightedyank'  " not needed in neovim
Plug 'mbbill/undotree'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-obsession'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'w0rp/ale'
if has("nvim")
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'wincent/corpus'
endif
call plug#end()

try
    source ~/.vim/private.vim
catch /E484:/
    echom "private.vim not found"
endtry

" Buffers
set hidden
set autoread
set noswapfile
" Remember more files
set viminfo=!,'1000,<50,s10,h
" Windows
set textwidth=80
set colorcolumn=80
set scrolloff=5
set sidescrolloff=3
set nowrap
try
    set diffopt+=vertical
catch /E474:/
    echom "This vim does not support diffopt vertical"
endtry
" Change default position of new splits
set splitbelow
set splitright
" Tabs and whitespace
set shiftwidth=4
set expandtab
set list
" Mouse
set mouse=a  " mouse support in terminals

if !has("nvim")
    " resize vim splits in tmux (not necessary and raises error in nvim)
    if &term =~ '^(tmux|screen)'
        set ttymouse=xterm2
    endif
    " make italics work in macOS's broken xterm-256color
    " https://stackoverflow.com/a/53625973/409879
    let &t_ZH="\e[3m"
    let &t_ZR="\e[23m"
    " " make bracketed paste mode work, https://vi.stackexchange.com/a/16579
    try
        let &t_BE="\<Esc>[?2004h"
        let &t_BD="\<Esc>[?2004l"
        let &t_PS="\<Esc>[200~"
        let &t_PE="\<Esc>[201~"
    catch /E18:/
        echom "Bracketed paste mode doesn't work in this version of vim"
    endtry
endif
" Clipboard
set clipboard^=unnamed  " yanks and cuts go in system clipboard
" Search
set ignorecase
set smartcase
set showmatch
set hlsearch
" Keys
set pastetoggle=<Leader>tp
nnoremap <leader><space> :noh<cr>
nnoremap <leader>w :bdelete<cr>
" h and l and ~ wrap over lines
set whichwrap=h,l,~
" Q reformats current paragraph or selected text
nnoremap Q gqap
vnoremap Q gq
" Use up and down to move by screen line
map <up> gk
map <down> gj
vmap <up> gk
vmap <down> gj
inoremap <up> <c-o>gk
inoremap <down> <c-o>gj
nmap k gk
nmap j gj
vmap k gk
vmap j gj
" Use J and K to move selection up and down in visual mode
" https://github.com/erkrnt/awesome-streamerrc/blob/5547d1da187ccd6fe4794b15f05c3cdcdc3725d0/ThePrimeagen/init.vim#L116-L117
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
" jk for esc
inoremap jk <esc>

" Use undotree and persist undo across sessions
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif
set undodir=~/.vim/undo-dir
set undofile
nnoremap <leader>u :UndotreeToggle<CR>

" Show list of possible files on tab completion, rather than first guess
set wildmode=longest,list

" Screen decoration
set number
set relativenumber
set cursorline
set statusline=
set statusline+=%{FugitiveStatusline()}%{ObsessionStatus()}
set statusline+=\ %f\ %y\ %=%c,%l/%L

" Colors
if filereadable(expand("~/.background-light"))
    set background=light
else
    set background=dark
endif
if exists('+termguicolors')
    " :help xterm-true-color (possibly unnecessary in nvim)
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
" Must happen before we set colorscheme; will rerun when colorscheme changes
augroup customize_iceberg
    autocmd!
    autocmd ColorScheme iceberg highlight! link IndentGuidesEven LineNr
    " Underline spelling problems
    autocmd ColorScheme iceberg highlight! link SpellBad Underlined
    autocmd ColorScheme iceberg highlight! link SpellCap SpellBad
    autocmd ColorScheme iceberg highlight! link SpellLocal SpellBad
    autocmd ColorScheme iceberg highlight! link SpellRare SpellBad
    " Tweak Error group (used for comments, etc.)
    " no bg (so it doesn't look weird under CursorLine)
    autocmd ColorScheme iceberg highlight Error ctermbg=NONE guibg=NONE
    " italic where it works, i.e. tmux-256color, xterm-256color, alacritty, etc.
    if &term !~ '^screen'
        autocmd ColorScheme iceberg highlight Error cterm=italic gui=italic
    endif
    " Prominent comments
    autocmd ColorScheme iceberg highlight! link Comment Error
    " Reverse selection
    autocmd ColorScheme iceberg highlight! Visual cterm=reverse gui=reverse
    " buftabline
    autocmd ColorScheme iceberg highlight! link BufTabLineCurrent PmenuSel
    autocmd ColorScheme iceberg highlight! link BufTabLineHidden LineNr
    autocmd ColorScheme iceberg highlight! link BufTabLineFill LineNr
    " statusline
    autocmd ColorScheme iceberg highlight! link StatusLine PmenuSel
    autocmd ColorScheme iceberg highlight! link StatusLineTerm PmenuSel
    autocmd ColorScheme iceberg highlight! link StatusLineNC LineNr
    autocmd ColorScheme iceberg highlight! link StatusLineTermNC LineNr
augroup END
try
    colorscheme iceberg
catch /E185:/
    echom "iceberg colorscheme not available"
    set notermguicolors
endtry

" Set fullscreen background to same color as normal text
if has("gui_running")
    set gfn=Fira\ Code:h14
    set fuoptions=maxvert
    set guioptions-=T
endif

" Use :w!! to save root files you forgot to open with sudo
ca w!! w !sudo tee "%"

" Default (overriden for specific filetypes below)
set formatoptions-=t

" Treat trailing whitespace as TODO syntax group
match Todo /\s\+$/

let g:ale_fixers = {
            \ 'python': ['isort', 'black'],
            \ 'bash': ['shfmt'],
            \ 'sh': ['shfmt']}
let g:ale_lint_on_text_changed = 'never'
let g:ale_fix_on_save = 1
" Unimpaired-style mappings to jump to ALE warnings/errors
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Expand %% to directory of file in current buffer (also %:h<Tab>)
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Name current syntax group
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" ss to generate new split
nnoremap <silent> ss <C-w>s

" readline bindings for command mode
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" FZF bindings
nmap <leader>h :History<cr>
nmap <leader>b :Buffers<cr>
nmap <leader>f :Files<cr>
nmap <leader>g :Rg<space>
" Search for current word
nnoremap <silent> <Leader>rg :Rg <C-R><C-W><CR>

" Leader-y to yank to system clipboard (works over remote tmux)
noremap <silent> <Leader>y :Oscyank<cr>

let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1

augroup vimrc
    autocmd! vimrc

    " Set shfmt options depending on shiftwidth
    autocmd OptionSet shiftwidth
                \ exec 'let g:ale_sh_shfmt_options = "-ci -i " . &shiftwidth'

    " Markdown: link selected text using URL in system clipboard
    autocmd Filetype markdown vnoremap <Leader>k <ESC>`>a](<ESC>"*pa)<ESC>`<i[<ESC>

    " Automatic rename of tmux window
    if exists('$TMUX') && !exists('$NORENAME')
        autocmd BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
        autocmd VimLeave * call system('tmux set-window automatic-rename on')
    endif

    " Trigger `autoread` when files changes on disk
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
                \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

    " Notification after file change
    " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
    autocmd FileChangedShellPost *
                \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

    " When editing a file, always jump to the last known cursor position.
    " Don't do it for commit messages, when the position is invalid, or when
    " inside an event handler (happens when dropping a file on gvim).
    " https://github.com/dkarter/dotfiles/blob/99b4c5675cb859a9e50f95c40b73cb3f95414ad0/vimrc#L1128-L1134
    autocmd BufReadPost *
                \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

    " formatlistpat taken from ftplugin/markdown.vim
    " spellcapcheck= disables capitalization checks
    autocmd FileType asciidoc,markdown,text,gitcommit setlocal
        \ formatoptions+=tcqln formatoptions-=r formatoptions-=o
        \ formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s[-*+]\\s\\+\\\|^\\[^\\ze[^\\]]\\+\\]:
        \ nojoinspaces spell spellcapcheck=

    " Don't spellcheck URLs https://vi.stackexchange.com/a/4003
    syntax match UrlNoSpell "\w\+:\/\/[^[:space:]]\+" contains=@NoSpell

    autocmd FileType css,html setlocal shiftwidth=2
    autocmd FileType javascript,typescript,typescriptreact setlocal shiftwidth=2
    autocmd FileType go setlocal shiftwidth=8 tabstop=8 noexpandtab
    autocmd BufRead,BufNewFile Dockerfile.fragment set filetype=Dockerfile
augroup END

" splitjoin
let g:splitjoin_trailing_comma = 1
let g:splitjoin_python_brackets_on_separate_lines = 1

" fugitive
let g:github_enterprise_urls = ['https://github.infra.cloudera.com']

" Write file without changing modification time
" https://unix.stackexchange.com/a/527154/20079
function! WriteSmall()
    let mtime = system("stat -c %.Y ".shellescape(expand('%:p')))
    write
    call system("touch --date='@".mtime."' ".shellescape(expand('%:p')))
    edit
endfunction

" Recompile .vim/spell/*.add to *.add.spl if necessary
" https://vi.stackexchange.com/a/5052
for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        exec 'mkspell! ' . fnameescape(d)
    endif
endfor

